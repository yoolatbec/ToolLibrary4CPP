/*
 * Object.h
 *
 *  Created on: Sep 9, 2020
 *      Author: yoolatbec
 */

#ifndef SRC_LANG_OBJECT_H_
#define SRC_LANG_OBJECT_H_

#include "../tl_def.h"

namespace tl {
namespace lang {

class Reference;
class String;

/**
 * Object is the base class of all classes defined in the library. It defined
 * basic behaviors of all classes in the library. By extending Object, a simple
 * generic system is implemented.
 */

class Object {
private:
	/*
	 * unique identifier for each class, with which it becomes easier to identify
	 * classes while running programs.
	 */
	const static type_t CLASS_SERIAL = 0;
protected:
	/*
	 * "unique" identifier for each instance of the classes in the library.
	 * It's generated by a quite simple algorithm, so occasion where two
	 * distinct instances of one class have the same hashcode may happen.
	 * Particularly in some classes, it happens frequently.
	 */
	hash_t mHashCode;
public:
	const static hash_t INSTANCE_MASK = 0X0000FFFF;

protected:
	/*
	 * the algorithm to generate hashcode for every instance created, accepts a legal
	 * class identifier, which is a type_t variable as argument
	 */
	virtual hash_t genHashCode(type_t);
public:
	Object();
	virtual ~Object();

	/*
	 * Considering the fact that instances are enclosed by Reference instances,
	 * there is no need to manually migrate data from one instance to another instance.
	 * Each class adapting the design pattern of the library, except those for particular purpose, should mark its copy constructor
	 * and default override of operator= method as delete, because they are no longer used.
	 */
	Object(const Object&) = delete;
	virtual Object& operator=(const Object&) = delete;
	/*
	 * Method equals() calls operator==() by default. It could be overrode for
	 * other particular ways of comparison.
	 */
	virtual bool equals(Reference);

	/*
	 * This method compare two instances to see whether they are identical by comparing
	 * their hashcode. If they own the same hashcode, they are seen as identical.
	 */
	virtual bool operator==(Reference);
	virtual Reference clone();

	/*
	 * This method converts any instances to String. By default the content of the String
	 * is the hashcode of the converted instance. For other output, override the method.
	 */
	virtual Reference toString();

	/*
	 * Every class designed according to the design pattern of the library should have the following two method.
	 * The first method, intanceof(), judges whether one instance is the instance of one class whose class identifier
	 * is passed as the argument to the method. If the return value is true, it means that the class of the instance has the same class identifier of the other class
	 * and therefore the two classes are the same. Otherwise, the two clases are not the same.
	 * The second method, type(), is a static method, which return the class identifier of the caller class.
	 */
	virtual bool instanceof(type_t);
	static type_t type();

	/*
	 * The method returning the hashcode of the caller instance.
	 */
	hash_t hashCode();
};

} /* namespace lang */
} /* namespace tl */

#endif /* SRC_LANG_OBJECT_H_ */
